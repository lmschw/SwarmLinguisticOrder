# variables
var id = 0	# the robot's ID within the line

# for average of last 10 sensor readings
var lastHorizontal0readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal1readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal2readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal3readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal4readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal5readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal6readings[] = [0,0,0,0,0,0,0,0,0,0]

var roundPointer = 0

var avgH0 = 0
var avgH1 = 0
var avgH2 = 0
var avgH3 = 0
var avgH4 = 0
var avgH5 = 0
var avgH6 = 0

var i = 0
# communication is enabled
call prox.comm.enable(1)

onevent prox
# updating the last reading arrays
	lastHorizontal0readings[roundPointer] = prox.horizontal[0]
	lastHorizontal1readings[roundPointer] = prox.horizontal[1]
	lastHorizontal2readings[roundPointer] = prox.horizontal[2]
	lastHorizontal3readings[roundPointer] = prox.horizontal[3]
	lastHorizontal4readings[roundPointer] = prox.horizontal[4]
	lastHorizontal5readings[roundPointer] = prox.horizontal[5]
	lastHorizontal6readings[roundPointer] = prox.horizontal[6]
	
	# computing the average of the last 10 sensor readings for all horizontal distance sensors
	callsub average
	# if there are no neighbours, set colour to white
	if (avgH2 < 10 and avgH2 > -10)  and (avgH5 < 10 and avgH5 > -10) or avgH6 < 10 and avgH6 > -10) then
		call leds.top(32,32,32)
	end
	
	# call the subroutine to establish the IDs
	callsub establishIDs

	# colour scheme for testing purposes and 3 robots only
	if id == 1 then
		call leds.top(32,0,0)
	elseif id == 2 then
		call leds.top(0,32,0)
	elseif id == 3 then
		call leds.top(0,0,32)
	end

# BOTTOM LAYER COMMUNICATION
sub establishIDs
	# if no neighbour behind but neighbour in front, ID = 1
	if id == 0 and ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10)) and (avgH2 > 10 or avgH2 < -10) then
		id = 1
		# send out the robot's ID
		prox.comm.tx = id
	# if ID != 1 and no neighbours behind or if ID == 1 and neighbours behind, re-establish the IDs
	elseif( id != 1 and ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10))) or (id == 1 and ((avgH5 > 10 and avgH5 < -10) or (avgH6 > 10 and avgH6 < -10))) then
		id = 0
		emit recountID
	end


onevent prox.comm
	# if the robot does not have an ID yet and it receives a message, it increments the senderID and stores it as its own
	if  id == 0 and prox.comm.rx != 0 then
		id = prox.comm.rx + 1
		# send out the robot's ID
		prox.comm.tx = id
	# if the robot has an ID but receives an unexpected ID, the IDs need to be re-established as it is likely that the order has changed
	elseif id != 0 and prox.comm.rx != (id-1) and prox.comm.rx != (id+1) then
		id = 0
		emit recountID
	end
	
# set ID back to 0 and pass the message on
onevent recountID
	if id != 0 then
		id = 0
		# send out the robot's ID
		prox.comm.tx = id
		emit recountID
	end

# computing the averages of all horizontal proximity sensor valules
sub average
	avgH0 = 0
	avgH1 = 0
	avgH2 = 0
	avgH3 = 0
	avgH4 = 0
	avgH5 = 0
	avgH6 = 0
	i = 0
	while i < 10 do
		avgH0 += lastHorizontal0readings[i]
		avgH1 += lastHorizontal1readings[i]
		avgH2 += lastHorizontal2readings[i]
		avgH3 += lastHorizontal3readings[i]
		avgH4 += lastHorizontal4readings[i]
		avgH5 += lastHorizontal5readings[i]
		avgH6 += lastHorizontal6readings[i]
		i++
	end
	avgH0 = avgH0/10
	avgH1 = avgH1/10
	avgH2 = avgH2/10
	avgH3 = avgH3/10
	avgH4 = avgH4/10
	avgH5 = avgH5/10
	avgH6 = avgH6/10