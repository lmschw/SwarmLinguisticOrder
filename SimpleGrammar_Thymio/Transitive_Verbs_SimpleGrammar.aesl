# CHASES
# VERBS: TRANSITIVE

#----------------------------------------------------------------------------I N I T----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------BEGIN INITIALISATION-------------------------------------------------------------------------------

#---------------------------------------------------------------------------variables--------------------------------------------------------------------------------------------------
# word-specific values
var value[] = [67,72,65,83,69,83] 			# the ASCII code every letter of the word as an array - 'chases'
var class = 3								# category - transitive verb  in this case
var coreclass = 1			# if the class is the core of a phrase

# global knowledge
var totalNumberOfRobots = 4	# the total number of robots to be assembled

# grammaticality judgements
var maxclass = class	# maximal phrase category achieved, e.g. NP, VP, construction etc.
var phraseID = 0			# id of the phrase containing the word
var phrasetype = 102		# type of the phrase corresponding to the phraseID
var oldphraseID = 0	# if superceding phrase, used to notify all other members of the same phrase
var phraseComplete = 0	# if the phrase is complete
var constructionComplete = 0	# if the whole construction is complete
#var phraseIDsInPhrase[4]	# where the IDs of all absorbed phrases are stored
var highestpid = 0	# highest phraseID below the current robot
var phrasestart = -1
var phraseend = -1
var phrasecore = -1
var updateComplete = 1
var upscalable = 0		# is another increment possible?
var updateSuccessful = 0
var higherPhrase = 0	# does the robot belong to another phrase
var bl = 0			# keep sending out the block event?
var lastPhraseAddition = 0	# ID of the core of the last phrase added

# storage variables
var consPossible[4] = [1,1,0,0]

# general variables
var id = 0 					# the communication ID. Corresponds to the number of the robot in the line starting from the backhigh
var oldid = 0				# to check if there has been a change in the order
var pid = 0					# underlying phrase id
var oldpid = 0				# to check if there has been a change in the pid

# aux variables
#var prevback = 0
#var prevfront = 0
var bool = 0
var i = 0
var j = 0

# completion check variables: be can be used as a transitive or intransitive verb in some circumstances
var trans_vp1comp[] = [0,class,0]
var trans_vp5comp[] = [0,class,0,0]
var trans_vp8comp[] = [0,0,0,class,0]
var trans_vp11comp[] = [0,0,0,class,0,0]

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------functions----------------------------------------------------------------------------------------------------

# enabling communication
call prox.comm.enable(1)

#----------------------------------------------------------------------------END INITIALISATION----------------------------------------------------------------------------------

onevent prox	
	
	oldid = id
	oldpid = pid
	
	#//////////////////////////////////////////////////////bottom layer communication
	# if no neighbour behind but neighbour in front, ID = 1
	if id == 0 and ((prox.horizontal[5] < 10 and prox.horizontal[5] > -10) or (prox.horizontal[6] < 10 and prox.horizontal[6] > -10)) and (prox.horizontal[2] > 10 or prox.horizontal[2] < -10) then
		id = 1
		# send out the robot's ID
		prox.comm.tx = id
	# if ID != 1 and no neighbours behind or if ID == 1 and neighbours behind, re-establish the IDs
	elseif( id != 1 and ((prox.horizontal[5] < 10 and prox.horizontal[5] > -10) or (prox.horizontal[6] < 10 and prox.horizontal[6] > -10)) and (prox.horizontal[2] > 10 or prox.horizontal[2] < -10)) then
		id = 1
		callsub reset
		emit recountID
	end
	
	#///////////////////////////////////////////////////top layer communication
	if pid == 0 and ((prox.horizontal[5] < 10 and prox.horizontal[5] > -10) or (prox.horizontal[6] < 10 and prox.horizontal[6] > -10)) and (prox.horizontal[2] > 10 or prox.horizontal[2] < -10) then
		if class != 1 and class != 10 and class != 12 and class != 14 then
			pid = 1
			highestpid = 1
			emit neighbour_value [id, pid]
		else
			pid = -2
			emit neighbour_value [id, 0]			
		end
	else
		emit neighbour_value [id, highestpid]
	end	
	if oldid != id and oldpid != pid then
		callsub reset
	end
	#///////////////////////////////////////////////////////
	
	if higherPhrase != 1  then
		phraseID = pid
		if coreclass == 1 then
			phrasestart = id
			phraseend = id
		else
			phrasestart = -1
			phraseend = -1
		end
	end
		
	#TODO what I need
	if id != 0 and phraseID != 0 and (maxclass == class or maxclass == 102) then
		emit searchNextCompletion [id, phraseID, phraseend, 	phrasetype]
		emit searchPrevCompletion [id, phraseID, phrasestart, phrasetype]
	end
	#TODO end
	
	if updateComplete == 0 then
		if phraseend != -1 and phraseend != 0 then
			emit checkUpdate [id, phrasecore, maxclass, phraseend]
		else
			emit checkUpdate [id, phrasecore, maxclass, id]
		end
	end
	
	if updateSuccessful == 1  and lastPhraseAddition != 0 then
		emit successfulUpdateConfirmation [id, lastPhraseAddition, phraseID, phrasetype, phraseComplete, upscalable]
	end
	
	if bl == 1 then
		emit block [id, phrasecore, maxclass]
	end
	
	if oldphraseID != phraseID and oldphraseID > 0 then
		emit supercede [id, oldphraseID, phraseID, phrasetype, phraseComplete, upscalable]
	end
	
	if phraseID <= 0 or (phrasestart == id and phraseend == id) then
		phraseComplete = 0
	end
	
	if phraseComplete == 1 and ((prox.horizontal[2] < 10 and prox.horizontal[2] > -10) and  ((prox.horizontal[5] > 10 or prox.horizontal[6] < -10) or (prox.horizontal[6] > 10 or prox.horizontal[6] < -10)) or phraseend == totalNumberOfRobots) then
		upscalable = 1
	end
	
	if phraseID > 0 and id > 0 then
		if constructionComplete == 1 or (phraseComplete == 1 and phraseend == totalNumberOfRobots and phrasestart == 1) then
			constructionComplete = 1
			emit constructionComplete [phraseID]
		elseif  phraseComplete == 1 then
			emit phraseComplete [phraseID, upscalable]
		end
	end
	
	# if there are no neighbours, set colour to white
	if (prox.horizontal[2] < 10 and prox.horizontal[2] > -10)  and ((prox.horizontal[5] < 10 and prox.horizontal[6] > -10) or (prox.horizontal[6] < 10 and prox.horizontal[6] > -10)) then
		id = 0
		callsub reset
		call leds.top(32,32,32)
	elseif constructionComplete == 1 then
		call leds.top(0,32,0)
	elseif phraseComplete == 1 then
		call leds.top(32,32,0)
	elseif id != 0 then
		call leds.top(32,0,0)
	else
		call leds.top(32,32,32)
	end

#-----------------------------------------------------------------------C O M M U N I C A T I O N----------------------------------------------------------------------------------
#-----------------------------------------------------------------------BOTTOM LAYER COMMUNICATION------------------------------------------------------------------------
# BOTTOM LAYER COMMUNICATION


onevent prox.comm
	# if the robot does not have an ID yet and it receives a message, it increments the senderID and stores it as its own
	if  id == 0 and prox.comm.rx != 0 and ((prox.horizontal[5] > 10 or prox.horizontal[5] < -10) or (prox.horizontal[6] > 10 or prox.horizontal[6] < -10)) then
		id = prox.comm.rx + 1
		# send out the robot's ID
		prox.comm.tx = id
	# if the robot has an ID but receives an unexpected ID, the IDs need to be re-established as it is likely that the order has changed
	elseif id != 0 and prox.comm.rx != (id-1) and prox.comm.rx != (id+1) and prox.comm.rx != 0 then
		if id != 1 or ((prox.horizontal[5] > 10 or prox.horizontal[5] < -10) or (prox.horizontal[6] > 10 and prox.horizontal[6] < -10)) then
			id = 0
		end
		prox.comm.tx = id
		callsub reset
		emit recountID
	end
	
# set ID back to 0 and pass the message on
onevent recountID
	pid = 0
	callsub reset
	if ((prox.horizontal[5] < 10 and prox.horizontal[5] > -10) or (prox.horizontal[6] < 10 and prox.horizontal[6] > -10)) and (prox.horizontal[2] > 10 or prox.horizontal[2] < -10) then
		if id != 1 then
			id = 1
			# send out the robot's ID
			prox.comm.tx = id
		end

	elseif  id > 1 then
		id = 0
		# send out the robot's ID
		prox.comm.tx = id
	end


#-------------------------------------------------------------------------TOP LAYER COMMUNICATION--------------------------------------------------------------------------------
# TOP LAYER COMMUNICATION


# neighbour_value [id{0}, maxphraseid{1}]
onevent neighbour_value
	if id == event.args[0]+1 then
		if class != 1 and class != 10 and class != 12 and class != 14 then
			pid = event.args[1] + 1
			highestpid = pid
			emit neighbour_value [id, pid]
		else
			pid = -2
			highestpid = event.args[1]
			emit neighbour_value [id, highestpid]
		end	
	end
	
#-----------------------------------------------------------------G R A M M A T I C A L I T Y    J U D G E M E N T S----------------------------------------------------------------
#-----------------------------------------------------------------SEARCH EVENTS------------------------------------------------------------------------------------------------------
# cannot complete a construction as a next.
#	emit searchNextCompletion [id{0}, phraseID{1}, phraseend{2}, 	phrasetype{3}]

# can only complete a ADVP
#	emit searchNextCompletion [id{0}, phraseID{1}, phrasestart{2}, 	phrasetype{3}]	
onevent searchPrevCompletion
	if  phraseID != event.args[1] and maxclass == 102 and upscalable == 1 and  updateComplete == 1 and (event.args[3] ==  101)  and event.args[2] == id+1 then
		bl = 0
		phrasecore = event.args[0]
		updateComplete = 0
		if phrasestart != -1 and phrasestart != 0 then
			emit checkUpdate [id, phrasecore, maxclass, phrasestart]
		else
			emit checkUpdate [id, phrasecore, maxclass, id]
		end
	elseif phraseID != event.args[1] and event.args[2] == id+1 and  (event.args[3] !=  105)then
		phrasecore = event.args[0]
		bl = 1
		emit block [id, phrasecore, maxclass]
	end

#----------------------------------------------------------------UPDATES----------------------------------------------------------------------------------------------------------------
# if a robot sends back a message, the robot checks if the new value should be included in the phrase
# completion check variables: be can be used as a transitive or intransitive verb in some circumstances
#var trans_vp1comp[] = [0,class,0]
#var trans_vp5comp[] = [0,class,0,0]
#var trans_vp8comp[] = [0,0,0,class,0]
#var trans_vp11comp[] = [0,0,0,class,0,0]

#0:var vp1[] = [101,3,101]	# NP + transV + NP
#1:var vp5[] = [101,3,101,103]	# NP + transV + NP + PP
#2:var vp8[] = [101,17,10,3,101]	# NP + do + NEG + transV + NP
#3:var vp11[] = [101,17,10,3,101,103]	# NP + do + NEG + transV + NP + PP
#	emit checkUpdate [id{0}, phrasecore{1}, maxclass{2}, phraseend{3}]
onevent checkUpdate
	bool = 0
	j = 0
	# sender further down the line
	if event.args[0] == phraseend + 1 then #if1
		bool = 1
		updateSuccessful = 0
		#0:var vp1[] = [101,3,101]	# NP + transV + NP
		#1:var vp5[] = [101,3,101,103]	# NP + transV + NP + PP
		#2:var vp8[] = [101,17,10,3,101]	# NP + do + NEG + transV + NP
		#3:var vp11[] = [101,17,10,3,101,103]	# NP + do + NEG + transV + NP + PP
		if event.args[2] == 101 then	# if2
			if (trans_vp1comp[2] == 0) or (trans_vp5comp[2] == 0) or (trans_vp8comp[4] == 0) or (trans_vp11comp[4] == 0) then	#if3
				updateSuccessful = 1
				trans_vp1comp[2] = 101
				trans_vp5comp[2] = 101
				trans_vp8comp[4] = 101
				trans_vp11comp[4] = 101
				if (trans_vp1comp[0] == 101) or (trans_vp8comp[0] == 101 and trans_vp8comp[1] == 17 and trans_vp8comp[2] == 10) then	#if4
					upscalable = 0
					phraseComplete = 1
				else
					upscalable = 0
					phraseComplete = 0
				end	#end if4
			end	#end if3
		#1:var vp5[] = [101,3,101,103]	# NP + transV + NP + PP
		#3:var vp11[] = [101,17,10,3,101,103]	# NP + do + NEG + transV + NP + PP
		elseif event.args[2] == 103 then
			if (trans_vp5comp[2] == 101 and trans_vp5comp[3] == 0) or (trans_vp11comp[4] == 101 and trans_vp11comp[5] == 0) then	#if5
				trans_vp5comp[3] = 103
				trans_vp11comp[4] = 103
				updateSuccessful = 1
				if (trans_vp5comp[0] == 101) or (trans_vp11comp[0] == 101 and trans_vp11comp[1] == 17 and trans_vp11comp[2] == 10) then	#if6
					phraseComplete = 1
					upscalable = 1
				else
					phraseComplete = 0
					upscalable = 0
				end	#end if6
			end	#end if5
		end
	## completion check variables: be can be used as a transitive or intransitive verb in some circumstances
	#var trans_vp1comp[] = [0,class,0]
	#var trans_vp5comp[] = [0,class,0,0]
	#var trans_vp8comp[] = [0,0,0,class,0]
	#var trans_vp11comp[] = [0,0,0,class,0,0]
	#
	##--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	##---------------------------------------------------------------------------constructions-------------------------------------------------------------------------------------------------
	#var vp1[] = [101,3,101]	# NP + transV + NP
	#var vp5[] = [101,3,101,103]	# NP + transV + NP + PP
	#var vp8[] = [101,17,10,3,101]	# NP + do + NEG + transV + NP
	#var vp11[] = [101,17,10,3,101,103]	# NP + do + NEG + transV + NP + PP

	#	emit checkUpdate [id{0}, phrasecore{1}, maxclass{2}, phrasestart{3}]

	# sender earlier in the line
	elseif event.args[1] == id and event.args[0] < id then
		j = 1
		updateSuccessful = 0
		#var vp1[] = [101,3,101]	# NP + transV + NP
		#var vp5[] = [101,3,101,103]	# NP + transV + NP + PP
		#var vp8[] = [101,17,10,3,101]	# NP + do + NEG + transV + NP
		#var vp11[] = [101,17,10,3,101,103]	# NP + do + NEG + transV + NP + PP
		if event.args[2] == 101 then	#if7
			trans_vp1comp[0] = 101
			trans_vp5comp[0] = 101
			updateSuccessful = 1
			if trans_vp1comp[2] == 101 then	#if9
				phraseComplete = 1
			else
				phraseComplete = 0
			end	#end if9
			if trans_vp5comp[2] == 101 and trans_vp5comp[3] == 103 then	#if11
				phraseComplete = 1
				upscalable = 1
			else
				phraseComplete = 0
				upscalable = 0
			end	#end if11
			if trans_vp8comp[1] == 17 and trans_vp8comp[2] == 10 then	#if12
				trans_vp8comp[0] = 101
				updateSuccessful = 1
				if trans_vp8comp[4] == 101 then	#if13
					phraseComplete = 1
				else
					phraseComplete = 0
				end	#end if13
			end	#end if12
			if trans_vp11comp[1] == 17 and trans_vp11comp[2] == 10 then	#if14
				trans_vp11comp[0] = 101
				updateSuccessful = 1
				if trans_vp11comp[4] == 101 and trans_vp11comp[5] == 103 then	#if15
					phraseComplete = 1
					upscalable = 1
				else
					phraseComplete = 0
					upscalable = 0
				end	#end if15
			end	#end if14
		end	#end if7
		#var vp8[] = [101,17,10,3,101]	# NP + do + NEG + transV + NP
		#var vp11[] = [101,17,10,3,101,103]	# NP + do + NEG + transV + NP + PP
		elseif event.args[2] == 17 then
			if ( trans_vp8comp[2] == 10 and trans_vp8comp[1] == 0) or (trans_vp11comp[2] == 10 and trans_vp11comp[1] == 0) then	#if16
				updateSuccessful = 1
				trans_vp8comp[1] = 17
				trans_vp11comp[1] = 17
				phraseComplete = 0
				upscalable = 0
			end	#end if16
		#var vp8[] = [101,17,10,3,101]	# NP + do + NEG + transV + NP
		#var vp11[] = [101,17,10,3,101,103]	# NP + do + NEG + transV + NP + PP
		elseif event.args[2] == 10 then
			if (trans_vp8comp[2] == 0) or (trans_vp11comp[2] ==  0) then	#if17
				updateSuccessful = 1
				trans_vp8comp[2] = 10
				trans_vp11comp[2] = 10
				phraseComplete = 0
				upscalable = 0
			end	#end if17
	end	#end if1
	if bool == 1 or j == 1 then	#if18
		if updateSuccessful == 1 and event.args[3] > 0  then	#if19
			higherPhrase = 1
			if bool == 1 then	#if20
				phraseend = event.args[3]
			elseif j == 1 and event.args[3] < id then
				phrasestart = event.args[3]
			end	#end if20
			
			lastPhraseAddition = event.args[0]
			emit successfulUpdateConfirmation [id, event.args[0], phraseID, phrasetype, phraseComplete, upscalable]
			if phraseComplete == 1 then	#if21
				emit phraseComplete [phraseID, upscalable]
			end	#end if21
		else
			if phraseComplete == 1 then	#if22
				upscalable = 1
				maxclass = phrasetype
			else
				upscalable = 0
			end	#end if22
			emit updateDeclination [id, event.args[0]]
		end	#end if19
	end	#end if18

# if the robot's phrase is absorbed, the supercede event informs it of the update
# emit supercede [id{0}, oldphraseID{1}, phraseID{2}, phrasetype{3}, phraseComplete{4}, upscalable{5}]
onevent supercede
	if event.args[1] == phraseID then
		oldphraseID = phraseID
		phraseID = event.args[2]
		phrasetype = event.args[3]
		if event.args[4] == 1 then
			phraseComplete = 1
			maxclass = phrasetype
		else
			phraseComplete = 0
		end
		if event.args[5] == 1 then
			upscalable = 1
		else
			upscalable = 0
		end
	end
	
# emit phraseComplete [phraseID, upscalable]
onevent phraseComplete
	if event.args[0] == phraseID then
		phraseComplete = 1
		upscalable = event.args[1]
	end
	
# emit constructionComplete [phraseID]
onevent constructionComplete
	if event.args[0] == phraseID then
		constructionComplete = 1
		upscalable = 1
	end

#	emit block [id, phrasecore, maxclass]	
onevent block
	if event.args[1] == id and event.args[0] == phraseend + 1 then
		if phraseComplete == 1 then
			upscalable = 1
			maxclass = phrasetype
		else
			upscalable = 0
		end
	end
	
#-------------------------------------------------------------RESPONSES------------------------------------------------------------------------------------------------------------------
#	emit successfulUpdateConfirmation [id{0}, event.args[0]{1}, phraseID{2}, phrasetype{3}, phraseComplete{4}, upscalable{5}]
# if the phrasecore confirms the update, the robot updates its own data
onevent successfulUpdateConfirmation
	if event.args[0] == phrasecore and event.args[1] == id and phraseID != event.args[2] then
		bl = 0
		higherPhrase = 1
		updateComplete = 1
		oldphraseID = phraseID
		phraseID = event.args[2]
		phrasetype = event.args[3]
		if event.args[4] == 1 then
			phraseComplete = 1
			maxclass = event.args[3]
		else
			phraseComplete = 0
		end
		if event.args[5] == 1 then
			upscalable = 1
		else
			upscalable = 0
		end
		emit supercede [id, oldphraseID, phraseID, phrasetype, phraseComplete, upscalable]
	end

#if the phrasecore declines the update, the robot switches back into considering other search events
#	emit updateDeclination [senderid, targetid]
onevent updateDeclination
	if event.args[0] == phrasecore and event.args[1] == id then
		phrasecore = 0
		updateComplete = 1
	end
	
#----------------------------------------------------------------R E S E T T I N G-----------------------------------------------------------------------------------------------------
sub reset
# completion check variables: be can be used as a transitive or intransitive verb in some circumstances
	trans_vp1comp = [0,class,0]
	trans_vp5comp = [0,class,0,0]
 	trans_vp8comp = [0,0,0,class,0]
	trans_vp11comp = [0,0,0,class,0,0]
	constructionComplete = 0
	phraseComplete = 0
	updateSuccessful = 0
	maxclass = class
	phraseID = 0
	oldpid = 0
	oldid = 0
	highestpid = 0
	pid = 0
	phrasetype = 102		# type of the phrase corresponding to the phraseID	
	oldphraseID = 0
	upscalable = 0
	phrasestart = 0
	phraseend = 0
	phrasecore = 0
	higherPhrase = 0
	updateComplete = 1
	bl = 0