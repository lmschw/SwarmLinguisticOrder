# this program allows robots to establish lines and keep moving within these lines.

var minsearchspeed = 200	# movement speed when not part of a line
var searchspeed	# the actual speed when not part of a line
var factor = 0	# the factor that changes the speed of the robot from time to time while searching
var linespeed = 150	# speed of the followers
var leaderspeed = 50	# speed of the line leader
var following = 0	# if the robot is following another robot, following = 1
var followed = 0	# if the robot has another robot following it, followed = 1
var maxdistance = 3000	# defines how close a robot will get to an obstacle
var robotdistance = 2000
var moving = 1	# is the robot ready to move?

var counter = 0		# used to keep track of the backward movement
var countermax = 10	# used to keep track of the backward movement
var backprotocol = 0	# is the robot moving backwards?

var leftsum	# sum of the left distance sensors
var rightsum	# sum of the right distance sensors

var id = 0	# robot's ID within its line

# the robot starts out moving in a straight line
motor.left.target = minsearchspeed
motor.right.target = minsearchspeed

timer.period[0] = 2000

#---------------------------------------------------------------------P R O X------------------------------------------------------------------------------------
onevent prox
#---------------------------------------------------------------------COMMUNICATION TOGGLE-----------------------------------------------------------
	# only enable communication if anything is near the robot; send out max possible receivable value when communication is enabled
	if prox.horizontal[0] > robotdistance or prox.horizontal[1] > robotdistance or prox.horizontal[2] > robotdistance or prox.horizontal[3] > robotdistance or prox.horizontal[4] > robotdistance or prox.horizontal[5] > robotdistance or prox.horizontal[6] > robotdistance then
		if id == 0 then
			call prox.comm.enable(1)
			prox.comm.tx = 2056
		end
	else
		call prox.comm.enable(0)
		id = 0
		following = 0
		followed = 0
	end
	
#----------------------------------------------------------------------FOLLOWER/LEADER-------------------------------------------------------------
	# if the robot has an ID, it is ready to start moving again. In that case, it establishes if it is the last robot in the line, i.e. at the front. If so, it is not following any other robot. Otherwise, it is. It also keeps track of the fact if any other robot is following it.
	if id > 0 then
		moving = 1
		prox.comm.tx = id
		if prox.horizontal[2] < 10 and prox.horizontal[2] > -10 then
			following = 0
			followed = 1
		else
			following = 1
			if prox.horizontal[5] > maxdistance -1000 or prox.horizontal[6] > maxdistance-1000 then
				followed = 1
			else
				followed = 0
			end		
		end
	end
	
	if (followed == 1 and prox.horizontal[5] < 10 and prox.horizontal[5] < -10 and prox.horizontal[6] < 10 and prox.horizontal[6] > -10) or (followed == 1 and id == 1) then
		id = 0
		emit recountID
	end

#----------------------------------------------------------------------MOVEMENT-------------------------------------------------------------------
	if moving == 1 then
			# if the robot is following another, it is entirely guided by its relative position to that robot. Unfortunately, it cannot distinguish between walls and the leader, so it may get shaken off at narrow turns.
		if following == 1 then
			leftsum = prox.horizontal[0] + prox.horizontal[1]
			rightsum = prox.horizontal[3] + prox.horizontal[4]
			# if the robot cannot sense the robot in front anymore, it will resume normal walking behaviour
			if leftsum <10 and leftsum > 10 and rightsum < 10 and rightsum > 10 then
				following = 0
				id = 0
			# if the robot is too close to its leader, it walks backwards. This is done in case the leader has to back up
			elseif prox.horizontal[2] > 4000 then
				motor.left.target = -linespeed - (id-1)*20
				motor.right.target = -linespeed - (id-1)*20
			# if the left side sensors measure approximately the same values as the right side sensors, it can be assumed that the robot is straight behind its leader
			elseif (leftsum < rightsum +100 and leftsum > rightsum - 100) then
				motor.left.target = linespeed - (id-1)*20
				motor.right.target = linespeed - (id-1)*20
			# turn left if the robot's right side is closer to the leader
			elseif leftsum < rightsum then
				motor.right.target = 0
				# turn more when the outermost sensor value is higher
				if prox.horizontal[0] < prox.horizontal[1] then
					motor.left.target = linespeed + 1/4 * linespeed
				# turn a little less when the outermost sensor value is lower to alllow for slighter adjustments
				else
					motor.left.target = linespeed - (id-1)*20
				end
			# turn right if the robot's left side is closer to the leader
			else
				motor.left.target = 0
				# turn more when the outermost sensor value is higher
				if prox.horizontal[4] < prox.horizontal[3] then
					motor.right.target = linespeed + 1/4 * linespeed - (id-1)*20
				# turn a little less when the outermost sensor value is lower to alllow for slighter adjustments
				else
					motor.right.target = linespeed - (id-1)*20
				end
			end
		else
			# the robot is not going backwards, i.e. forwards or turn
			if backprotocol == 0 then
				# if the robot is too close to an obstacle in front, it starts moving backwards
				if prox.horizontal[1] > maxdistance and prox.horizontal[3]> maxdistance then
					backprotocol = 1
					if followed == 1 then
						motor.left.target = leaderspeed
						motor.right.target = leaderspeed
					else
						motor.left.target = searchspeed
						motor.right.target = searchspeed
					end
				# if the robot has something directly in front or slightly to the left and closer than the maximal permitted distance, it turns quickly to the right and turns red
				elseif prox.horizontal[2] > maxdistance or prox.horizontal[1] > maxdistance then
					motor.right.target = 0
					if followed == 1 then
						motor.left.target = leaderspeed + 1/4 * leaderspeed
					else
						motor.left.target = searchspeed+ 1/4 * searchspeed
					end
				# if the robot has something slightly to the right and closer than the maximal permitted distance, it turns quickly to the left and turns yellow
				elseif  prox.horizontal[3] > maxdistance then
					motor.left.target = 0
					if followed == 1 then
						motor.right.target = leaderspeed + 1/4 * leaderspeed
					else
						motor.right.target = searchspeed + 1/4 * searchspeed
					end
				# if the robot has something on its far left, it turns right more slowly and turns purple
				elseif prox.horizontal[0] > maxdistance then
					motor.right.target = 0
					if followed == 1 then
						motor.left.target = leaderspeed
					else
						motor.left.target = searchspeed
					end
				# if the robot has something on its far right, it turns left more slowly and turns green
				elseif  prox.horizontal[4] > maxdistance then
					motor.left.target = 0
					if followed == 1 then
						motor.right.target = leaderspeed
					else
						motor.right.target = searchspeed
					end
				# if there is nothing in front of the robot, it moves straight und turns cyan
				else
					if followed == 1 then
						motor.left.target = leaderspeed
						motor.right.target = leaderspeed
					else
						motor.left.target = searchspeed
						motor.right.target = searchspeed
					end
				end
			# the robot is moving backwards
			else
				call leds.top(0,0,32)
				counter++
				# move backwards while the counter has not reached its maximum and there is nothing behind the robot
				if counter < countermax and prox.horizontal[5] < 3300 and prox.horizontal[6] < 3300 then
					if followed == 1 then
						motor.left.target = -leaderspeed
						motor.right.target = -leaderspeed
					else
						motor.left.target = -searchspeed
						motor.right.target = -searchspeed
					end
				# turn right once the counter has reached the countermax (plus error margin)
				elseif counter >= countermax and counter < (countermax +5) then
					motor.right.target = 0
					if followed == 1 then
						motor.left.target = leaderspeed
					else
						motor.left.target = searchspeed
					end
				# once the turn is complete, the robot starts moving straight forward again and the counter is reset
				elseif counter >=  (countermax + 5) then
					if followed == 1 then
						motor.left.target = leaderspeed
						motor.right.target = leaderspeed
					else
						motor.left.target = searchspeed
						motor.right.target = searchspeed
					end
					backprotocol = 0
					counter = 0
				end
			end
		end
#-------------------------------------------------------------------------------------ID ESTABLISHMENT---------------------------------------------------------------------------------
	else
		if id == 0 and ((prox.horizontal[5] < 10 and prox.horizontal[5] > -10) or (prox.horizontal[6] < 10 and prox.horizontal[6] > -10)) and (prox.horizontal[2] > 10 or prox.horizontal[2] < -10) then
			id = 1
			# send out the robot's ID
			prox.comm.tx = id
		# if ID != 1 and no neighbours behind or if ID == 1 and neighbours behind, re-establish the IDs
		elseif( id != 1 and ((prox.horizontal[5] < 10 and prox.horizontal[5] > -10) or (prox.horizontal[6] < 10 and prox.horizontal[6] > -10)) and (prox.horizontal[2] > 10 or prox.horizontal[2] < -10)) then
			id = 1
			emit recountID
		end
		
			# if the robot does not have any neighbours, its ID is reset to 0.
		if (prox.horizontal[2] < 10 and prox.horizontal[2] > -10)  and ((prox.horizontal[5] < 10 and prox.horizontal[5] > -10) or (prox.horizontal[6] < 10 and prox.horizontal[6] > -10)) then
			id = 0
			call leds.top(32,32,32)
		end
	end # END from the movement/id if 
	
#-----------------------------------------------------------------------------------COLOUR SCHEME-------------------------------------------------------------------------------------
	# colour scheme for testing purposes and 3 robots only
	if id == 1 then
		call leds.top(32,0,0)
	elseif id == 2 then
		call leds.top(0,32,0)
	elseif id == 3 then
		call leds.top(0,0,32)
	elseif id == 4 then
		call leds.top(32,32,0)
	elseif id == 5 then
		call leds.top(32,0,32)
	elseif id == 6 then
		call leds.top(0,32,32)
	else
		call leds.top(32,32,32)
	end
	
#--------------------------------------------------------------------------P R O X C O M M-----------------------------------------------------------------------------------------
onevent prox.comm
	if prox.comm.rx == 2056 then
		id = 0
		emit recountID
		motor.left.target = 0
		motor.right.target = 0
		moving = 0
	# if the robot does not have an ID yet and it receives a message, it increments the senderID and stores it as its own
	elseif  id == 0 and prox.comm.rx != 0 and ((prox.horizontal[5] > 10 or prox.horizontal[5] < -10) or (prox.horizontal[6] > 10 or prox.horizontal[6] < -10)) then
		id = prox.comm.rx + 1
		# send out the robot's ID
		prox.comm.tx = id
	# if the robot has an ID but receives an unexpected ID, the IDs need to be re-established as it is likely that the order has changed
	elseif id != 0 and prox.comm.rx != (id-1) and prox.comm.rx != (id+1) and prox.comm.rx != 0 then
		id = 0
		motor.left.target = 0
		motor.right.target = 0
		moving = 0
		emit recountID
	end
	
	
#----------------------------------------------------------------------------R E C O U N T I D--------------------------------------------------------------------------------------	
# set ID back to 0 and pass the message on
onevent recountID
	if ((prox.horizontal[5] < 10 and prox.horizontal[5] > -10) or (prox.horizontal[6] < 10 and prox.horizontal[6] > -10)) and (prox.horizontal[2] > 10 or prox.horizontal[2] < -10) then
		if id != 1 then
			id = 1
			# send out the robot's ID
			prox.comm.tx = id
		end
	elseif  id > 1 then
		id = 0
		# send out the robot's ID
		prox.comm.tx = id
	end
	
onevent timer0
			call math.rand(factor)
			if factor < 0 then
				factor = factor * -1
			end
			call math.sqrt(factor,factor)
			searchspeed = minsearchspeed + factor
