# this program allows the robot to decide how happy it is with the position the user puts it in with regards to the values assigned to its neighbours. 

#----------------------------------------------------------------------------I N I T----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------BEGIN INITIALISATION-------------------------------------------------------------------------------
# variables
var value = 75 			# the ASCII code of the letter
var id = 0 					# the communication ID. Corresponds to the number of the robot in the line starting from the back
var nextval = 0 			# the value of the next robot. This is the robot in front
var prevval = 0			# the value of the previous robot. This is the robot behind this robot
var happiness = -1	# how happy the robot is where it is at the moment. -1 if it does not have neighbours
var oldhappiness = 0	# used for comparisons

#  last 10 sensor readings
var lastHorizontal0readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal1readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal2readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal3readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal4readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal5readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal6readings[] = [0,0,0,0,0,0,0,0,0,0]

var roundPointer = 0	# next index that needs to be updated in the sensor readings arrays

# averages of the last 10 sensor readings
var avgH0 = 0
var avgH1 = 0
var avgH2 = 0
var avgH3 = 0
var avgH4 = 0
var avgH5 = 0
var avgH6 = 0

var i = 0	# counter variable

# frequencies
var prev[27]				# array storing all the frequencies for the previous values
var next[27]				# array storing all the frequencies for the subsequent values

# initializing the context frequencies []a. abc + space
prev[0] = 135
prev[1] = 0
prev[2] = 271
prev[3] = 0
prev[4] = 35
prev[5] = 0
prev[6] = 0
prev[7] = 0
prev[8] = 42
prev[9] = 0
prev[10] = 0
prev[11] = 28
prev[12] = 0
prev[13] = 92
prev[14] = 92
prev[15] = 0
prev[16] = 0
prev[17] = 107
prev[18] = 78
prev[19] = 0
prev[20] = 0
prev[21] = 0
prev[22] = 0
prev[23] = 0
prev[24] = 0
prev[25] = 0
prev[26] = 114

# initializing the context frequencies a[]. abc + space
next[0] = 21
next[1] = 0
next[2] = 0
next[3] = 0
next[4] = 271
next[5] = 7
next[6] = 7
next[7] = 0
next[8] = 121
next[9] = 0
next[10] = 0 
next[11] = 14
next[12] = 0 
next[13] = 57
next[14] = 0
next[15] = 0
next[16] = 0
next[17] = 0 
next[18] = 21
next[19] = 0
next[20] = 0
next[21] = 0
next[22] = 0 
next[23] = 0
next[24] = 14 
next[25] = 0
next[26] = 464

# resetting the leds so that no previous colour setting interferes
call leds.top(0,0,0)

# enabling communication
call prox.comm.enable(1)

#----------------------------------------------------------------------------END INITIALISATION----------------------------------------------------------------------------------

#----------------------------------------------------------------------------G E N E R A L--------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------BEGIN PROX BLOCK---------------------------------------------------------------------------------
# this event is launched at regular intervals. Therefore, any code within the prox event will be executed regularly. 
onevent prox
	#////////////////////////////////////////////////////////////////////////readings update
	# updating the last reading arrays
	lastHorizontal0readings[roundPointer] = prox.horizontal[0]
	lastHorizontal1readings[roundPointer] = prox.horizontal[1]
	lastHorizontal2readings[roundPointer] = prox.horizontal[2]
	lastHorizontal3readings[roundPointer] = prox.horizontal[3]
	lastHorizontal4readings[roundPointer] = prox.horizontal[4]
	lastHorizontal5readings[roundPointer] = prox.horizontal[5]
	lastHorizontal6readings[roundPointer] = prox.horizontal[6]
	
	#//////////////////////////////////////////////////////////////////////average
	# computing the average of the last 10 sensor readings for all horizontal distance sensors
	avgH0 = 0
	avgH1 = 0
	avgH2 = 0
	avgH3 = 0
	avgH4 = 0
	avgH5 = 0
	avgH6 = 0
	i = 0
	while i < 10 do
		avgH0 += lastHorizontal0readings[i]
		avgH1 += lastHorizontal1readings[i]
		avgH2 += lastHorizontal2readings[i]
		avgH3 += lastHorizontal3readings[i]
		avgH4 += lastHorizontal4readings[i]
		avgH5 += lastHorizontal5readings[i]
		avgH6 += lastHorizontal6readings[i]
		i++
	end
	avgH0 = avgH0/10
	avgH1 = avgH1/10
	avgH2 = avgH2/10
	avgH3 = avgH3/10
	avgH4 = avgH4/10
	avgH5 = avgH5/10
	avgH6 = avgH6/10
	
	#///////////////////////////////////////////////////////////////////establishIDs
	# if no neighbour behind but neighbour in front, ID = 1
	if id == 0 and ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10)) and (avgH2 > 10 or avgH2 < -10) then
		id = 1
		# send out the robot's ID
		prox.comm.tx = id
	# if ID != 1 and no neighbours behind or if ID == 1 and neighbours behind, re-establish the IDs
	elseif( id != 1 and ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10)) and (avgH2 > 10 or avgH2 < -10)) then
		id = 1
		emit recountID
	end
	
	#//////////////////////////////////////////////////////////////check neighbours
	# if there are no neighbours, set happiness to -1 and reset both prevval and nextval
	if (avgH2 < 10 and avgH2 > -10)  and ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10)) then
		happiness = -1
		nextval = 0
		prevval = 0
	# if there is no neighbour in front but one behind, reset nextval to 0
	elseif  (avgH2 < 10 and avgH2 > -10)  then
		nextval = 0
	# if there is no neighbour behind but one in front, reset prevval to 0
	elseif ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10))  then
		prevval = 0
	end
	
	#////////////////////////////////////////////////////////////emit neighbour_value
	# if the robot has an ID, it broadcasts its value and its ID. That way, the receiving robots can check if they should consider the value
	if id !=0 then
		emit neighbour_value [id, value]
	end
	
	#//////////////////////////////////////////////////////////establish happiness	
	# if the robot has two neighbours, it does the sum; if the robot only has one neighbour, the other side is considered an empty space; if the robot does not have neighbours, happiness = -1
	oldhappiness = happiness
 	if prevval != 0 and nextval != 0 then
 		happiness = prev[prevval-65] + next[nextval-65]
 	elseif nextval != 0 then
 		happiness = prev[26] + next[nextval-65]
 	elseif prevval != 0 then
 		happiness = prev[prevval-65] + next[26]
 	else
 		happiness = -1
 	end

	#/////////////////////////////////////////////////////////colour scheme
	if happiness == -1 then
		call leds.top(32,32,32)
	elseif  happiness > 200 then
		call leds.top(0,32,0)
		if oldhappiness <= 200 then
			call sound.system(7)
		end
	elseif  happiness > 100 then
		call leds.top(32,32,0)
		if oldhappiness > 200 or oldhappiness <= 100 then
			call sound.system(6)
		end
	else
		call leds.top(32,0,0)
		if oldhappiness > 100 then
			call sound.system(4)
		end
	end	

#----------------------------------------------------------------------------END PROX BLOCK-------------------------------------------------------------------------------

#-------------------------------------------------------------------B O T T O M   L A Y E R   C O M M U N I C A T I O N-------------------------------------------------
#------------------------------------------------------------------BEGIN PROX.COMM BLOCK-----------------------------------------------------------------------------
# if the robot receives a message using prox.comm, it assumes an ID or checks if it has been moved.
	# if the robot does not have an ID yet and it receives a message, it increments the senderID and stores it as its own
onevent prox.comm
	# if the robot does not have an ID yet and it receives a message, it increments the senderID and stores it as its own
	if  id == 0 and prox.comm.rx != 0 and ((avgH5 > 10 or avgH5 < -10) or (avgH6 > 10 or avgH6 < -10)) then
		id = prox.comm.rx + 1
		# send out the robot's ID
		prox.comm.tx = id
	# if the robot has an ID but receives an unexpected ID, the IDs need to be re-established as it is likely that the order has changed
	elseif id != 0 and prox.comm.rx != (id-1) and prox.comm.rx != (id+1) and prox.comm.rx != 0 then
		if id != 1 or ((avgH5 > 10 or avgH5 < -10) or (avgH6 > 10 and avgH6 < -10)) then
			id = 0
		end
		prox.comm.tx = id
		emit recountID
	end

#------------------------------------------------------------------END PROX.COMM  BLOCK----------------------------------------.---------------------------------------
#------------------------------------------------------------------BEGIN RECOUNTID BLOCK-------------------------------------------------------------------------------
# set ID back to 0 and pass the message on
onevent recountID
	if ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10)) and (avgH2 > 10 or avgH2 < -10) then
		if id != 1 then
			id = 1
			# send out the robot's ID
			prox.comm.tx = id
		end

	elseif  id > 1 then
		id = 0
		# send out the robot's ID
		prox.comm.tx = id
	end
#------------------------------------------------------------------END RECOUNTID BLOCK---------------------------------------------------------------------------------

#----------------------------------------------------------------------------V A L U E   H A N D L I N G----------------------------------------------------------------------
#----------------------------------------------------------------------------BEGIN NEIGHBOUR BLOCK---------------------------------------------------------------------	
# whenever the robot receives a neighbour_value event, it checks if it is entitled to handle these events. For that, it needs to have an id, i.e. it needs to be in the line
# if it is in the line, it checks if the value is relevant to it. Only the direct neighbours values are considered relevant. These are the robots with the IDs that are the robot's 
# own ID +/-1. If that is the case, the values for the previous or next robot are updated accordingly. As the IDs count upwards from the end, the value is assigned to
# prevval if it is lower and to nextval if it is higher
onevent neighbour_value # takes 2 arguments: ID and value
	if id != 0 then
		if event.args[0] == id-1 then
			prevval = event.args[1]
		elseif  event.args[0] == id+1 then
			nextval = event.args[1]
		end
	end

#----------------------------------------------------------------------------END NEIGHBOUR BLOCK-----------------------------------------------------------------------
