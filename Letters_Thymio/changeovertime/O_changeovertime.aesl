# this program allows the robot to decide how happy it is with the position the user puts it in with regards to the values assigned to its neighbours. If it is not happy, it will walk off after a while unless the escape behaviour is disabled

#----------------------------------------------------------------------------I N I T----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------BEGIN INITIALISATION-------------------------------------------------------------------------------

# OPTIONS
var speed = 200			# how fast the robots move away
var stopMovementAfter = 20	# how long they move when they walk away
var changerate = 1 	# changerate == 2: 12s; 3: 18s; 30: 171s;; max: 125; the higher the rate, the slower the escape; determines how long the robot waits if it is unhappy; set changerate = 0 to prevent escape behaviour

# variables
var value = 79 			# the ASCII code of the letter
var id = 0 					# the communication ID. Corresponds to the number of the robot in the line starting from the back
var nextval = 0 			# the value of the next robot. This is the robot in front
var prevval = 0			# the value of the previous robot. This is the robot behind this robot
var nextsave = 0 		# the last value stored for the next robot. Used to measure if the neighbours have changed
var prevsave = 0 		# the last value stored for the previous robot. Used to measure if the neighbours have changed
var change				# boolean variable to indicate if there have been any changes
var walksies = 0		# counter to determine when to stop moving
var changeratemax = 10000	# the maximum number to be counted down from for the modulo calculations for the change in happiness
var changerateupdate = changeratemax	# the current number to be counted down from for the modulo calculations for the change in happiness
var happiness = -1	# how happy the robot is where it is at the moment. -1 if it does not have neighbours
var oldhappinessgroup = -1	# used to emit sounds when robot switches colour due to automatic decrease

#  last 10 sensor readings
var lastHorizontal0readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal1readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal2readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal3readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal4readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal5readings[] = [0,0,0,0,0,0,0,0,0,0]
var lastHorizontal6readings[] = [0,0,0,0,0,0,0,0,0,0]

var roundPointer = 0	# next index that needs to be updated in the sensor readings arrays

# averages of the last 10 sensor readings
var avgH0 = 0
var avgH1 = 0
var avgH2 = 0
var avgH3 = 0
var avgH4 = 0
var avgH5 = 0
var avgH6 = 0

var i = 0	# counter variable

# frequencies
var prev[27]				# array storing all the frequencies for the previous values
var next[27]				# array storing all the frequencies for the subsequent values

# initializing the context frequencies []a. abc + space
prev[0] = 0
prev[1] = 27
prev[2] = 141
prev[3] = 16
prev[4] = 4
prev[5] = 33
prev[6] = 11
prev[7] = 57
prev[8] = 157
prev[9] = 8
prev[10] = 0
prev[11] = 55
prev[12] = 44
prev[13] = 35
prev[14] = 35
prev[15] = 68
prev[16] = 0
prev[17] = 94
prev[18] = 45
prev[19] = 60
prev[20] = 0
prev[21] = 15
prev[22] = 15
prev[23] = 0
prev[24] = 7
prev[25] = 1
prev[26] = 61

# initializing the context frequencies a[]. abc + space
next[0] = 12
next[1] = 11
next[2] = 26
next[3] = 25
next[4] = 3
next[5] = 14
next[6] = 11
next[7] = 1
next[8] = 9
next[9] = 0
next[10] = 9
next[11] = 57
next[12] = 68
next[13] = 257
next[14] = 35
next[15] = 38
next[16] = 0
next[17] = 146
next[18] = 38
next[19] = 47
next[20] = 83
next[21] = 28
next[22] = 39
next[23] = 1
next[24] = 7 
next[25] = 0
next[26] = 20

# resetting the leds so that no previous colour setting interferes
call leds.top(0,0,0)

# enabling communication
call prox.comm.enable(1)

#----------------------------------------------------------------------------END INITIALISATION----------------------------------------------------------------------------------

#----------------------------------------------------------------------------G E N E R A L--------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------BEGIN BUTTONS BLOCK-------------------------------------------------------------------------------
# this event handler deals with the buttons. These are not part of the actual behaviour but rather used for safety and disambiguation.
onevent buttons
	# while the forward button is pressed, the robot will show a colour. Different colours can be used if the robots need to be disambiguated.
	if (button.forward == 1) then
		call leds.top(32,15,32) #purple
	end
	# if the backward button is pressed, the robot stops moving. Safety measure in case the robot runs off or is at risk
	if button.backward == 1 then
		motor.left.target = 0
		motor.right.target = 0
	end

#----------------------------------------------------------------------------END BUTTONS BLOCK-------------------------------------------------------------------------------
#----------------------------------------------------------------------------BEGIN PROX BLOCK---------------------------------------------------------------------------------
# this event is launched at regular intervals. Therefore, any code within the prox event will be executed regularly. 
# this code segment handles the updates from the subroutines it calls and updates the colour
onevent prox
	#////////////////////////////////////////////////////////////////////////readings update
	# updating the last reading arrays
	lastHorizontal0readings[roundPointer] = prox.horizontal[0]
	lastHorizontal1readings[roundPointer] = prox.horizontal[1]
	lastHorizontal2readings[roundPointer] = prox.horizontal[2]
	lastHorizontal3readings[roundPointer] = prox.horizontal[3]
	lastHorizontal4readings[roundPointer] = prox.horizontal[4]
	lastHorizontal5readings[roundPointer] = prox.horizontal[5]
	lastHorizontal6readings[roundPointer] = prox.horizontal[6]
	
	#//////////////////////////////////////////////////////////////////////average
	# computing the average of the last 10 sensor readings for all horizontal distance sensors
	avgH0 = 0
	avgH1 = 0
	avgH2 = 0
	avgH3 = 0
	avgH4 = 0
	avgH5 = 0
	avgH6 = 0
	i = 0
	while i < 10 do
		avgH0 += lastHorizontal0readings[i]
		avgH1 += lastHorizontal1readings[i]
		avgH2 += lastHorizontal2readings[i]
		avgH3 += lastHorizontal3readings[i]
		avgH4 += lastHorizontal4readings[i]
		avgH5 += lastHorizontal5readings[i]
		avgH6 += lastHorizontal6readings[i]
		i++
	end
	avgH0 = avgH0/10
	avgH1 = avgH1/10
	avgH2 = avgH2/10
	avgH3 = avgH3/10
	avgH4 = avgH4/10
	avgH5 = avgH5/10
	avgH6 = avgH6/10
	
	#//////////////////////////////////////////////////////////////escape movement
	# this segment deals with the escape movement. If the escape movement is activated and the robot does not have any neighbours, it checks if it is moving forward of backward and adjusts the direction if it has been turning. After a certain while - timed using the counter 'walksies' - the robot stops and resets 'walksies' for the next escape	
	if (avgH0 < 10 and avgH0 > -10) and (avgH4 < 10 and avgH4 > -10)  and (avgH5 < 10 and avgH5 > -10) and (avgH6 < 10 and avgH6 > -10)  then
		if motor.left.target > 0 and walksies < stopMovementAfter then
			motor.left.target = speed
			motor.right.target = speed
			walksies++
		elseif motor.left.target < 0 and walksies < stopMovementAfter then
			motor.left.target = -speed
			motor.right.target = -speed
			walksies++
		else
			motor.left.target = 0
			motor.right.target = 0
			walksies = 0
		end
	end
	
	#///////////////////////////////////////////////////////////////////establishIDs
	# if no neighbour behind but neighbour in front, ID = 1
	if id == 0 and ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10)) and (avgH2 > 10 or avgH2 < -10) then
		id = 1
		# send out the robot's ID
		prox.comm.tx = id
	# if ID != 1 and no neighbours behind or if ID == 1 and neighbours behind, re-establish the IDs
	elseif( id != 1 and ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10)) and (avgH2 > 10 or avgH2 < -10)) then
		id = 1
		emit recountID
	end
	
	#//////////////////////////////////////////////////////////////check neighbours
	# if there are no neighbours, set happiness to -1 and reset both prevval and nextval
	if (avgH2 < 10 and avgH2 > -10)  and ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10)) then
		happiness = -1
		nextval = 0
		prevval = 0
	# if there is no neighbour in front but one behind, reset nextval to 0
	elseif  (avgH2 < 10 and avgH2 > -10)  then
		nextval = 0
	# if there is no neighbour behind but one in front, reset prevval to 0
	elseif ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10))  then
		prevval = 0
	end
	
	#////////////////////////////////////////////////////////////emit neighbour_value
	# if the robot has an ID, it broadcasts its value and its ID. That way, the receiving robots can check if they should consider the value
	if id !=0 then
		emit neighbour_value [id, value]
	end
	
	#///////////////////////////////////////////////////////////check for change
	# checking if there have been any changes to the neighbours will influence the happiness as the happiness is only decreased if there is no change.
	# if the saved and the current value of the previous and the subsequent robot are the same, no change has been made
	if prevval == prevsave and nextval == nextsave then
		change = 0
	# if one or both values are different, then there has been some change,  the saved states are updated and the changerateupdate value is reset to the max
	else
		change = 1
		changerateupdate = changeratemax
		prevsave = prevval
		nextsave = nextval
	end	
	
	#//////////////////////////////////////////////////////////establish happiness
	# if there has not been any change since the last time the happiness was established, the happiness is gradually reduced to help the user to possibly determine where the error might lie. However, happiness is only actually decreased if the changerate is not zero, thus giving the option to disable the decrease.
	if change == 0 then
 		if happiness > 0  then
 			if changerateupdate % changerate == 0 then
 				 happiness = happiness-1
 			end
 			changerateupdate--
 		# if the robot is too unhappy, it walks away. the movement does not stop until it is brought to a stop by pressing the backward button
 		elseif happiness == 0 then
 			# if there is nothing in front of it, it walks straight ahead
 			if (avgH2 < 10 and avgH2 > -10) then
 				motor.left.target = speed
 				motor.right.target = speed
 			# if there is something in front but nothing at the back, it moves straight backwards
 			elseif (avgH5 < 10 and avgH5 > -10) and (avgH6 < 10 and avgH6 > -10) then
 				motor.left.target = -speed
 				motor.right.target = -speed
 			# if it is in the middle of two robots, it turns right
 			else
 				motor.left.target = 200
 				motor.right.target = 0
 			end
 		end
 		
	 # if the robot has two neighbours, it does the sum; if the robot only has one neighbour, the other side is considered an empty space; if the robot does not have neighbours, happiness = -1
 	else
 		if prevval != 0 and nextval != 0 then
 			happiness = prev[prevval-65] + next[nextval-65]
 		elseif nextval != 0 then
 			happiness = prev[26] + next[nextval-65]
 		elseif prevval != 0 then
 			happiness = prev[prevval-65] + next[26]
 		else
 			happiness = -1
 		end
 	end

	#/////////////////////////////////////////////////////////colour scheme
	if happiness == -1 then
		call leds.top(32,32,32)
		oldhappinessgroup = -1
	elseif  happiness > 200 then
		call leds.top(0,32,0)
		if change == 1 or oldhappinessgroup != 1 then
			call sound.system(7)
			oldhappinessgroup = 1
		end
	elseif  happiness > 100 then
		call leds.top(32,32,0)
		if change == 1 or oldhappinessgroup != 2 then
			call sound.system(6)
			oldhappinessgroup = 2
		end
	else
		call leds.top(32,0,0)
		if change == 1 or oldhappinessgroup != 3 then
			call sound.system(4)
			oldhappinessgroup = 3
		end
	end

#----------------------------------------------------------------------------END PROX BLOCK-------------------------------------------------------------------------------

#-------------------------------------------------------------------B O T T O M   L A Y E R   C O M M U N I C A T I O N-------------------------------------------------
#------------------------------------------------------------------BEGIN PROX.COMM BLOCK-----------------------------------------------------------------------------
# if the robot receives a message using prox.comm, it assumes an ID or checks if it has been moved.
	# if the robot does not have an ID yet and it receives a message, it increments the senderID and stores it as its own
onevent prox.comm
	# if the robot does not have an ID yet and it receives a message, it increments the senderID and stores it as its own
	if  id == 0 and prox.comm.rx != 0 and ((avgH5 > 10 or avgH5 < -10) or (avgH6 > 10 or avgH6 < -10)) then
		id = prox.comm.rx + 1
		# send out the robot's ID
		prox.comm.tx = id
	# if the robot has an ID but receives an unexpected ID, the IDs need to be re-established as it is likely that the order has changed
	elseif id != 0 and prox.comm.rx != (id-1) and prox.comm.rx != (id+1) and prox.comm.rx != 0 then
		if id != 1 or ((avgH5 > 10 or avgH5 < -10) or (avgH6 > 10 and avgH6 < -10)) then
			id = 0
		end
		prox.comm.tx = id
		emit recountID
	end

#------------------------------------------------------------------END PROX.COMM  BLOCK----------------------------------------.---------------------------------------
#------------------------------------------------------------------BEGIN RECOUNTID BLOCK-------------------------------------------------------------------------------
# set ID back to 0 and pass the message on
onevent recountID
	if ((avgH5 < 10 and avgH5 > -10) or (avgH6 < 10 and avgH6 > -10)) and (avgH2 > 10 or avgH2 < -10) then
		if id != 1 then
			id = 1
			# send out the robot's ID
			prox.comm.tx = id
		end

	elseif  id > 1 then
		id = 0
		# send out the robot's ID
		prox.comm.tx = id
	end
#------------------------------------------------------------------END RECOUNTID BLOCK---------------------------------------------------------------------------------

#----------------------------------------------------------------------------V A L U E   H A N D L I N G----------------------------------------------------------------------
#----------------------------------------------------------------------------BEGIN NEIGHBOUR BLOCK---------------------------------------------------------------------	
# whenever the robot receives a neighbour_value event, it checks if it is entitled to handle these events. For that, it needs to have an id, i.e. it needs to be in the line
# if it is in the line, it checks if the value is relevant to it. Only the direct neighbours values are considered relevant. These are the robots with the IDs that are the robot's 
# own ID +/-1. If that is the case, the values for the previous or next robot are updated accordingly. As the IDs count upwards from the end, the value is assigned to
# prevval if it is lower and to nextval if it is higher
onevent neighbour_value # takes 2 arguments: ID and value
	if id != 0 then
		if event.args[0] == id-1 then
			prevval = event.args[1]
		elseif  event.args[0] == id+1 then
			nextval = event.args[1]
		end
	end

#----------------------------------------------------------------------------END NEIGHBOUR BLOCK-----------------------------------------------------------------------
