<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="73" name="value"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="2" name="thymio-II"># variable declarations
var prev[27]
var next[27]
var happiness = 0 # how happy the robot is in its current position
var change = 0 # used as boolean. has anything been changed?
var before = -1 # value of the robot behind
var after = -1 # value of the robot in front
var t0period = 500
var restperiod = 100
var moveperiod = 300
var direction = 0 # 0 for right, 1 for left
call prox.comm.enable(1)

# ONLY THIS PART IS LETTER SPECIFIC
# initializing the context frequencies []a. abc + space
prev[0] = 44
prev[1] = 17
prev[2] = 38
prev[3] = 60
prev[4] = 10
prev[5] = 36
prev[6] = 20
prev[7] = 43
prev[8] = 0
prev[9] = 0
prev[10] = 10
prev[11] = 73
prev[12] = 39
prev[13] = 43
prev[14] = 7
prev[15] = 20
prev[16] = 0
prev[17] = 94
prev[18] = 89
prev[19] = 185
prev[20] = 14
prev[21] = 37
prev[22] = 21
prev[23] = 3
prev[24] = 0
prev[25] = 1
prev[26] = 80

# initializing the context frequencies a[]. abc + space
next[0] = 35
next[1] = 14
next[2] = 94
next[3] = 34
next[4] = 35
next[5] = 21
next[6] = 36
next[7] = 0
next[8] = 0
next[9] = 0
next[10] = 3 
next[11] = 47
next[12] = 35 
next[13] = 202
next[14] = 132
next[15] = 19
next[16] = 1
next[17] = 39 
next[18] = 90
next[19] = 98
next[20] = 0
next[21] = 43
next[22] = 0 
next[23] = 2
next[24] = 0 
next[25] = 7
next[26] = 3

timer.period[0] = t0period
timer.period[1] = restperiod

# this subroutine updates the happiness value of the robot according to its neighbours and if any changes have been made to those neighbours. If the happiness value has already been below 100 before, the robot moves away

sub happycheck
 if change == 0 then
 if happiness > 50  then
 	happiness = happiness-20
 else
 	motor.left.target = 200
 	motor.right.target = 200
 end
 # if the robot has two neighbours, it does the sum.
 # if the robot only has one neighbour, the other side is considered an empty space
 # if the robot does not have neighbours, happiness = -1
 else
 	if before != -1 and after != -1 then
 		happiness = prev[before-65] + next[after-65]
 	elseif after != -1 then
 		happiness = prev[26] + next[after-65]
 	elseif before != -1 then
 		happiness = prev[before-65] + next[26]
 	else
 		happiness = -1
 	end
 end
 
 # blue if no neighbours, red if unhappy enough to walk away, yellow if unhappy but okay, green if happy
 if happiness == -1 then
 	call leds.top(0,0,32)
 elseif happiness &lt; 50 then
 	call leds.top(32,0,0)
 elseif happiness &lt; 75 then
 	call leds.top(32,32,0)
 else
 	call leds.top(0,32,0)
 end

# when the robot receives a new value, it updates its before and after values and calls the happycheck subroutine 
onevent prox.comm
	after = prox.comm.rx
	change = 1
	callsub happycheck

# every time the timer reaches 0, the happiness value is reduced by 20 by calling the happycheck subroutine
onevent timer0
	change = 0
	callsub happycheck

# timer1 does the direction discrimination. It makes sure that only one robot is close enough to communicate by slowly oscillating between two poles: right and left	
onevent timer1
	if timer.period[1] == restperiod then
		if direction == 0 then
			motor.left.target = -200
			motor.right.target = -200
			direction = 1
		else
			motor.left.target = 200
			motor.right.target = 200
			direction = 0
		end
		timer.period[1] = moveperiod
	else
		motor.left.target = 0
		motor.right.target = 0
		timer.period[1] = restperiod
	end</node>


</network>
